package DAO_design_mode;

/**
 * Created by Doctor on 2017/1/5.
 * 理解程序设计分层的思想
 * DAO设计模式的组成以及各部分的开发
 */
public class Java_DAO_Layered_Design {
    public static void main(String[] args) {
        /**在此部分讲解的时候除了IO部分暂时不会使用到之外，所有Java 的重点的核心部分都会采用到.*/
        //TODO 程序的分层
        //实际上在任何的环境下分层的概念都会存在,例如：在公司里面可以按照职位分层。每一个城都是完全独立的.
        //并且可以与其他层进行完整的交互。
        /**@现在以人类交谈为例做一个简单的分层:
         *  大脑是作为所有信息存储的单位存在,可以理解为数据层
         *  依靠语言或者是各个的行为模式来讲分散的数据组合在一起
         *  还是需要有一些辅助性的外表的支持
         */
        //Todo 如果要对程序进行划分,那么最常见的划分方式：显示层+控制层+业务层+数据层+数据库
        /**
         * 在整个项目之中,后台业务是最为核心的部分,因为现在的移动应用的火爆问题，所以对于前段层已经不再单独的局限于
         * 一个简单的WEB层了,而可能是Android,IOS前台,而且随着技术的发展,对于前台的开发还可能不适用Java.使用Python或者Node.JS进行包装
         * 那么既然整个项目的核心是后台业务层,那么什么叫业务？什么叫数据？
         *
         * 业务层：是整个程序提供的操作功能，而一个业务层的操作要想完成,需要多个数据层的操作一起共同完成
         * 数据层完成的只是一个个原子性的数据库操作.而在实际的开发之中,每一个操作的业务往往需要牵涉到多个原子型的操作
         * 也就是说所有的原子性的操作业务最终在业务层中完成。
         *
         * 在实际的开发之中,业务的设计是非常复杂的，本次的操作只是简单的区分了业务层与数据层的一个基础关系.而如果你的
         * 业务非常复杂,那么往往需要一个总业务层，而后会牵涉到若干个子业务层，每一个子业务层又执行多个数据层。
         *
         * @数据层：又被称为数据访问层(Data Access Object,DAO),是专门进行数据库的原子性操作，也就是说在数据层之中最
         * 需要控制的就是JDBC 中的PreparedStatement接口的使用
         * @业务层：又被称为业务对象（Business Object,BO）,但是现在又有一部分认为应该将其称为服务层（Service）,业务层
         * 核心的目的是调用多个数据层的操作以完成整体的相聚的业务设计，这个是整个项目的核心所在。
         */

        /**Todo 现在要求使用emp表（empno,ename,job,hiredate,sal,comm）实现如下的操作功能：
         * 【客户提的所有的需求都叫业务层】
         *  【业务层】1.实现雇员数据的添加,但是需要保证被添加的雇员编号不会重复
         *       |-[数据层]判断要增加的雇员编号是否存在
         *       |-[数据层]如果雇员编号不存在这进行数据的保存操作
         *  【业务层】2.实现雇员数据的修改操作
         *       |-[数据层]执行数据的修改操作
         *  【业务层】3.实现多个雇员数据的删除操作
         *       |-[数据层]执行雇员的限定的删除操作
         *  【业务层】4.可以根据雇员编号查找到一个雇员的信息
         *       |-[数据层]根据雇员编号查询指定的雇员数据
         *  【业务层】5.可以查询所有雇员的信息
         *       |-[数据层]查询所有的雇员数据
         *  【业务层】6.可以实现数据的分页显示，同时又可以返回所有的雇员数量
         *       |-[数据层]雇员数据的分页查询
         *       |-[数据层]使用COUNT()函数统计出所有的雇员数量
         * Todo  【客户提的所有的需求都叫业务层】,因为他指的是功能,而开发人员必须根据业务层去进行数据层的设计
         */
    }
}
