package com.study_java8;

/**
 * Created by Doctor on 2016/10/24.
 *1.面向对象核心概念：类、接口、抽象类、对象
 *2.开发工具
 *3.JDK 版本新特性
 * --------------------------
 * 包指的就是目录：package
 */
        /*
         *  |--打包编译：javac -d . Hello.java
         *     "-d":生成目录，根据package的定义生成
         *     ".":设置保存的路径，如果为“." 表示在当前所在路径下生成
         *  |--在解释程序的时候不要进入到包里面解释程序，应该在包的外面（不一定要在包所在的父目录的根目录，这取决于该目录是否设置为CLASSPATH环境变量的值）输入类的完整名称（切换到包目录的子目录也不能执行）
         *  java package 类名称
         */

public class Java_Basic_Package {
    public static void main(String[] args){
        /*总结：关于public class 和class 声明了的完整区别：
         *public class:文件名称必须与类名称保持一致,在一个*.java文件里面只能够有一个类public class 声明，如果一个类需要被不停的包
         * 所访问,那么一定要定义为public class
         * class:文件名称可以与类名称不一致，并且一个*.java文件里面可以有多个class文件。如果一个类使用的是class定义，那么表示这个类只能够被本包所访问
         */
        //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        /*Java编译器考虑到作为大型程序开发的时候有可能会存在有多个*。java文件相互引用的情况（那么去执行java xxx.java的时候就需要去判断程序的编译先后顺序判断的先后顺序就很复杂），为了解决这个问题，提供了通配符“*”操作
         *javac -d . *java
         *
         * 在代码编写的是去import包的各个类也比复杂：所以也可以：
         * import 包.*:这个并不是只全部导入，二十只导入程序里面所需要的类，所以不需要去考虑性能问题
         *
         * 如果两个不同的包中有同名的类名称并且在使用类中都需要导入：那么编译会出错；解决办法：加上包的全名称
         */
        //------------------------------------------------------------------------------------------------------------------------------------------------------------------
        /*常见Java包：
         * java.lang:包含了String、Object、Integer等类, 从JDK1.1 开始此包自动导入
         * java.lang.reflect:反射开发包 整个Java最大的精髓
         * java.util:Java的工具包，提供了大量的工具类，像链表；
         * java.util.regex:正则工具包
         * java.text:国际化处理程序包
         * java.io:输入、输出处理以及文件操作
         * java.net:网络编程开发包
         * java.sql:数据库程序开发包
         * java.applet:Applet程序开发包（已经不用了）Applet是最高的Java出现的形式，功能类似于今天的JavaScript
         * java.awt、javax.swing:图形界面的开发包,主要功能是进行单机版程序界面开发
         *|----JDK 1.0的时候主要推出的是awt开发包，但是这个开发包大量使用了windows图形函数：就丧失了可移植性
         *|----JDK1.2的时候隆重推出了javax.swing开发包,是一个轻量级（Java自己写的，不再使用window图形函数）
         *所以从此Java更名为Java 2.这也是Java和Java2最大的区别
         */
        //Applet和Application的区别：
        //Applet是Java在网页上嵌套的程序，是爱用绘图的方式完成的显示，而Application是在主方法上运行
        //------------------------------------------------------------------------------------------------------------------------------------------------------------------
        /*jar 命令：
         *在任何一个项目里面一定会存在有大量的*.class文件，那么如果将这些*class文件交给用户使用个，那么会造成文件过多，兵器会导致程序非常没有结构，
         * 所以在交互用户使用之前，会使用jar命令针对*.class进行压缩,并且压缩的单位都是以包为主的
         *
         * 1.打包编译文件
         * 2.jar -c -v -f "jar文件名称“ 包名
         * 生成的jar文件并能够直接使用，必须配置CLASSPATH才可以加载
         * eg:SET CLASSPATH = .;E:\mydemo\my.jar.这也是为什么JDK的CLASSPATH中：要设置为：.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;D:\src 这种形式
         * 在以后的开发之中需要大量的使用第三方jar文件，那么所有的jar文件必须配置CLASSPATH环境变量才能使用
         * CLASSPATH:用于配置查找class文件的路径或者多个jar路径
         */
    }
}
